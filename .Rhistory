#testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Clear Useless Variables
testing$Ticket <- NULL
testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
testing[is.na(testing$Age),]$Age <- 0
testing[is.na(testing$Fare),]$Fare <- 0
#test.h2o <- as.h2o(localH2O, testing, key='test.hex')
# ========================Submitting Stuff
#predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
#submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
#                    Survived = predictions$predict)
testing[testing$Title=='Dona',]$Title <- 'Don'
testing$Title <- as.factor(testing$Title)
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=testing$Survived)
testing$Survived <- predictions
submit <- data.frame(PassengerId=testing$PassengerId, Survived=testing$Survived)
write.csv(submit, file = "submittion_111714_cinco.csv", row.names = FALSE)
modelFinal
ggplot(data=set,
aes(Age*Pclass, Survived)
) +
geom_point(
)
library(ggplot2)
ggplot(data=set,
aes(Age*Pclass, Survived)
) +
geom_point(
)
ggplot(data=set,
aes(Age^Pclass, Fare)
) +
geom_point(
aes(colour=factor(set$Survived))
)
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
ggplot(data=set,
aes(Age^Fare, Pclass
) +
geom_point(
aes(colour=factor(set$Survived))
)
)
ggplot(data=set,
aes(Age^Fare, Pclass)
) +
geom_point(
aes(colour=factor(set$Survived))
)
2^2
View(set)
set$Ticket <- as.character(set$Ticket)
set$place <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
set$place <- sub(' ', '', set$place)
set$place <- factor(set$place)
View(Set)
View(set)
set$Ticket <- as.character(set$Ticket)
set$place <- sapply(set$Ticket, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
set$place <- sub(' ', '', set$place)
set$place <- factor(set$place)
View(set)
# Append ticket prefix
set$Ticket <- as.character(set$Ticket)
set$place <- sapply(set$Ticket, FUN=function(x) {strsplit(x, split='[ ]')[[1]][1]})
set$place <- sub(' ', '', set$place)
set$place <- factor(set$place)
View(set)
ggplot(data=set,
aes(place, Age)
) +
geom_point(
aes(colour=factor(set$Survived))
)
is.na(set$Cabin)
set$Cabin <- if set$Cabin=='0', TRUE
set[set$Cabin != '',]$Cabin <- 1
set[set$Cabin==' ',]$Cabin <- 0
set$Cabin <- as.numeric(set$Cabin)
View(set)
set[set$Cabin != ' ',]$Cabin <- 1
set <- read.csv('train.csv')
set[set$Cabin != ' ',]$Cabin <- 1
set[set$Cabin==' ',]$Cabin <- 0
View(backup)
View(set)
set <- backup
set[set$Cabin != '',]$Cabin <- 1
View(set)
as.string()
as.char()
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Create Find age median and replace it in the missing values
male_median <- median(set[set$Sex=='male',]$Age)
female_median <- median(set[set$Sex=='female',]$Age)
set[is.na(set$Age) & set$Sex=='male',] <- male_median
set[is.na(set$Age) & set$Sex=='female',] <- female_median
# Create Age^Fare Variable
set$AgeFare <- set$Age^set$Fare
# Cabin or not?
set$Cabin <- as.character(set$Cabin)
set[set$Cabin != '',]$Cabin <- 1
set[set$Cabin=='',]$Cabin <- 0
set$Cabin <- as.numeric(set$Cabin)
View(set)
set <- backup
set$Cabin <- as.character(set$Cabin)
set[set$Cabin != ' ',]$Cabin <- 1
View(set)
backup<-set
set$Cabin <- as.character(set$Cabin)
View(set)
set <- read.csv('train.csv')
backup <- set
set$Cabin <- as.character(set$Cabin)
View(set)
set[[1]]$Cabin
set[[1]]
set[,1]
set[1,]
set[1,]$Cabin
set[set$Cabin=="",]$Cabin <- 0
set[1,]$Cabin
set[set$Cabin != "",]$Cabin <- 1
View(set)
set <- backup
set$Cabin <- as.character(set$Cabin)
set[set$Cabin=="",]$Cabin <- 0
set[set$Cabin != "0",]$Cabin <- 1
set$Cabin <- as.numeric(set$Cabin)
View(set)
ggplot(data=set,
aes(Fare, Age)
) +
geom_point(
aes(colour=factor(set$Survived))
)
ggplot(data=set,
aes(Fare^Age, SibSp)
) +
geom_point(
aes(colour=factor(set$Survived))
)
ggplot(data=set,
aes(Fare^Age, Pclass)
) +
geom_point(
aes(colour=factor(set$Survived))
)
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Create Find age median and replace it in the missing values
male_median <- median(set[set$Sex=='male',]$Age)
female_median <- median(set[set$Sex=='female',]$Age)
set[is.na(set$Age) & set$Sex=='male',] <- male_median
set[is.na(set$Age) & set$Sex=='female',] <- female_median
# Create Age^Fare Variable
set$AgeFare <- set$Age^set$Fare
# Cabin or not?
set$Cabin <- as.character(set$Cabin)
set[set$Cabin=="",]$Cabin <- 0
set[set$Cabin != "0",]$Cabin <- 1
set$Cabin <- as.numeric(set$Cabin)
# Gender to binary
set[set$Sex=='male',]$Sex <- 1
set[set$Sex=='female',]$Sex <- 0
# Clear Useless Variables
set$Ticket <- NULL
#set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
ctrl <- trainControl(
method = "repeatedcv",
number=10,
repeats=1,
returnResamp = "all",
classProbs = TRUE  )
TG <- data.frame(
n.trees=50,  # default of 100
interaction.depth=2,  # default of 3
shrinkage=0.1)  #default of 0.1
nukem <- 'BoxCox'
indy <- training[!names(training) %in% c('Survived')]
depy <- as.factor(training$Survived)
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
set$FamilySize <- set$SibSp + set$Parch + 1
male_median <- median(set[set$Sex=='male',]$Age)
female_median <- median(set[set$Sex=='female',]$Age)
set[is.na(set$Age) & set$Sex=='male',]$Age <- male_median
set[is.na(set$Age) & set$Sex=='female',]$Age <- female_median
set$AgeFare <- set$Age^set$Fare
# Cabin or not?
set$Cabin <- as.character(set$Cabin)
set[set$Cabin=="",]$Cabin <- 0
set[set$Cabin != "0",]$Cabin <- 1
set$Cabin <- as.numeric(set$Cabin)
# Gender to binary
set[set$Sex=='male',]$Sex <- 1
set[set$Sex=='female',]$Sex <- 0
# Clear Useless Variables
set$Ticket <- NULL
#set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Create Find age median and replace it in the missing values
male_median <- median(set[set$Sex=='male',]$Age)
female_median <- median(set[set$Sex=='female',]$Age)
set[is.na(set$Age) & set$Sex=='male',]$Age <- male_median
set[is.na(set$Age) & set$Sex=='female',]$Age <- female_median
# Create Age^Fare Variable
set$AgeFare <- set$Age^set$Fare
# Cabin or not?
set$Cabin <- as.character(set$Cabin)
set[set$Cabin=="",]$Cabin <- 0
set[set$Cabin != "0",]$Cabin <- 1
set$Cabin <- as.numeric(set$Cabin)
set[set$Sex=='male',]$Sex <- '1'
View(set)
set <- backup
set$Sex <- as.character(set$Sex)
set[set$Sex=='male',]$Sex <- '1'
set[set$Sex=='female',]$Sex <- '0'
set$Sex <- as.numeric(set$Sex)
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Create Find age median and replace it in the missing values
male_median <- median(set[set$Sex=='male',]$Age)
female_median <- median(set[set$Sex=='female',]$Age)
set[is.na(set$Age) & set$Sex=='male',]$Age <- male_median
set[is.na(set$Age) & set$Sex=='female',]$Age <- female_median
# Create Age^Fare Variable
set$AgeFare <- set$Age^set$Fare
# Cabin or not?
set$Cabin <- as.character(set$Cabin)
set[set$Cabin=="",]$Cabin <- 0
set[set$Cabin != "0",]$Cabin <- 1
set$Cabin <- as.numeric(set$Cabin)
# Gender to binary
set$Sex <- as.character(set$Sex)
set[set$Sex=='male',]$Sex <- '1'
set[set$Sex=='female',]$Sex <- '0'
set$Sex <- as.numeric(set$Sex)
set$Ticket <- NULL
#set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
set.seed(6645)
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Create Find age median and replace it in the missing values
male_median <- median(set[set$Sex=='male',]$Age)
female_median <- median(set[set$Sex=='female',]$Age)
set[is.na(set$Age) & set$Sex=='male',]$Age <- male_median
set[is.na(set$Age) & set$Sex=='female',]$Age <- female_median
# Create Age^Fare Variable
set$AgeFare <- set$Age^set$Fare
# Cabin or not?
set$Cabin <- as.character(set$Cabin)
set[set$Cabin=="",]$Cabin <- 0
set[set$Cabin != "0",]$Cabin <- 1
set$Cabin <- as.numeric(set$Cabin)
# Gender to binary
set$Sex <- as.character(set$Sex)
set[set$Sex=='male',]$Sex <- '1'
set[set$Sex=='female',]$Sex <- '0'
set$Sex <- as.numeric(set$Sex)
# Clear Useless Variables
set$Ticket <- NULL
#set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
library(caret)
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
ctrl <- trainControl(
method = "repeatedcv",
number=10,
repeats=1,
returnResamp = "all",
classProbs = TRUE  )
TG <- data.frame(
n.trees=50,  # default of 100
interaction.depth=2,  # default of 3
shrinkage=0.1)  #default of 0.1
nukem <- 'BoxCox'
indy <- training[!names(training) %in% c('Survived')]
depy <- as.factor(training$Survived)
model_gbm <- train(x=indy,
y=depy,
method='gbm',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
#tuneGrid=TG,
tuneLength=3)
model_gbm
predictions <- predict(model_gbm,validation)
confusionMatrix(predictions, validation$Survived)
model_rf <- train(x=indy,
y=depy,
method='rf',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
#tuneGrid=TG,
tuneLength=3)
model_rf
predictions <- predict(model_gbm,validation)
confusionMatrix(predictions, validation$Survived)
model_rpart <- train(x=indy,
y=depy,
method='rpart',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
#tuneGrid=TG,
tuneLength=3)
model_rpart
predictions <- predict(model_gbm,validation)
confusionMatrix(predictions, validation$Survived)
load("~/Documents/workspace/R/Kaggle_Projects/Titanic/model_rf_1.rda")
ctrl <- trainControl(
method = "repeatedcv",
number=10,
repeats=5,
returnResamp = "all",
classProbs = TRUE  )
TG <- data.frame(
iter=500,
maxdepth=30,
nu=0.01  )
nukem <- 'BoxCox'
indy <- training[!names(training) %in% c('Survived')]
depy <- as.factor(training$Survived)
model_ada <- train(x=indy,
y=depy,
method='ada',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
predictions <- predict(model_ada,validation)
confusionMatrix(predictions, validation$Survived)
save(model_ada,file='model_ada_1.RDA')
ggplot(data=set,
aes(Fare^Age, Pclass)
) +
geom_point(
aes(colour=factor(set$Survived))
) + position_jitter()
ggplot(data=set,
aes(Fare^Age, Pclass)
) +
geom_point(
aes(colour=factor(set$Survived))
position = position_jitter(w = 0.1, h = 0.1)
)
ggplot(data=set,
aes(Fare^Age, Pclass)
) +
geom_point(
aes(colour=factor(set$Survived)),
position = position_jitter(w = 0.1, h = 0.1)
)
ggplot(data=set,
aes(Fare*PClass)
) +
geom_point(
aes(colour=factor(set$Survived)),
position = position_jitter(w = 0.1, h = 0.1)
)
ggplot(data=set,
aes(Fare*Pclass,Age)
) +
geom_point(
aes(colour=factor(set$Survived)),
position = position_jitter(w = 0.1, h = 0.1)
)
model_rf <- train(form=Survived ~ Age + Sex + Fare + FamilySize + PClass,
data=training,
method='rf',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_rf
model_rf <- train(form=Survived ~ Age + Sex + Fare + FamilySize + Pclass,
data=training,
method='rf',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_rf
model_rf <- train(form=Survived ~ Age + Sex + Fare + FamilySize + Pclass,
data=training,
method='rf',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
#tuneGrid=TG,
tuneLength=3)
model_rf
warnings()
model_rf <- train(form=Survived ~ Age + Sex + Fare + FamilySize + Pclass,
data=training,
method='rf',
#preProcess=nukem,
type='Classification',
trControl=ctrl,
#tuneGrid=TG,
tuneLength=3)
model_rf
warnings()
model_rf <- train(form=Survived ~ Age + Sex + Fare + FamilySize + Pclass,
data=training,
method='rf',
#preProcess=nukem,
type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
getmodelInfo(rf)
getModelInfo('rf')
