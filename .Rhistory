set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Second make a cutesy variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
#set$Ticket <- NULL
set$Cabin <- NULL # thinking the incomplete nature of cabin can be handled by h2o
set$Name <- NULL
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
# randomize the training
nr<-dim(training)[1]
training[sample.int(nr),]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.rf <- h2o.randomForest(x=indy,y=depy,
data=train.h2o,
nfolds=10, mtries=10,
classification=TRUE,
depth=10000, ntree=500,
nodesize=10, seed=654197,
balance.classes=TRUE)
predcictions <- h2o.predict(model.rf,valid.h2o)
h2o.confusionMatrix(predcictions$predict,valid.h2o$Survived)
rm(list = ls())
library(caret)
library(h2o)
set.seed(9484)
set <- read.csv('train.csv')
backup <- set
# Setup h2o
localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
#set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
# randomize the training
nr<-dim(training)[1]
training[sample.int(nr),]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=100, epochs=100,
hidden=c(20,20),
activation='Rectifier',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- as.data.frame(h2o.predict(model.nn,newdata=valid.h2o))
validation$pred1 <- predictions$predict
confusionMatrix(validation$pred1,validation$Survived)
View(train.h2o)
set$Embarked <- NULL
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
# randomize the training
nr<-dim(training)[1]
training[sample.int(nr),]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=100, epochs=100,
hidden=c(20,20),
activation='Rectifier',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
# randomize the validation
nr<-dim(validation)[1]
validation[sample.int(nr),]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=100, epochs=100,
hidden=c(10,10,10),
activation='Maxout',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- as.data.frame(h2o.predict(model.nn,newdata=valid.h2o))
validation$pred1 <- predictions$predict
confusionMatrix(validation$pred1,validation$Survived)
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=10, epochs=10,
hidden=c(10,10,10),
activation='MaxoutWithDropout',
# balance_classes=TRUE,
# single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- as.data.frame(h2o.predict(model.nn,newdata=valid.h2o))
validation$pred1 <- predictions$predict
confusionMatrix(validation$pred1,validation$Survived)
h2o.confusionMatrix(predictions,valid.h2o)
h2o.confusionMatrix(valid.h2o,predictions)
View(predictions)
validation$preds <- predictions$predict
confusionMatrix(validation$preds,validation$Survived)
confusionMatrix(as.factor(validation$preds),as.factor(validation$Survived))
levels(validation$preds)
levels(validation$Survived)
View(validation)
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=10, epochs=10,
hidden=c(10,10,10),
activation='RectifierWithDropout',
# balance_classes=TRUE,
# single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- as.data.frame(h2o.predict(model.nn,newdata=valid.h2o))
validation$preds <- predictions$predict
confusionMatrix(validation$preds,validation$Survived)
??h2o.confusionMatrix
predictions <- h2o.predict(model.nn,newdata=valid.h2o)
h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=10, epochs=10,
hidden=c(15,15,15),
activation='RectifierWithDropout',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- h2o.predict(model.nn,newdata=valid.h2o)
h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=10, epochs=10,
hidden=c(15,15,15),
activation='RectifierWithDropout',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- h2o.predict(model.nn,newdata=valid.h2o)
h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=10, epochs=10,
hidden=c(15,15,15,15),
activation='Rectifier',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- h2o.predict(model.nn,newdata=valid.h2o)
h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=10, epochs=10,
hidden=c(15,15,15,15),
activation='Rectifier',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- h2o.predict(model.nn,newdata=valid.h2o)
h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
modelFinal <- model.nn
testing <- read.csv('test.csv')
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
#set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
test.h2o <- as.h2o(localH2O, testing, key='test.hex')
# ========================Submitting Stuff
predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
Survived = predictions$predict)
write.csv(submit, file = "submittion_111314_cinco.csv", row.names = FALSE)
View(test.h2o)
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
testing <- read.csv('test.csv')
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
set$FamilySize <- set$SibSp + set$Parch + 1
testing <- read.csv('test.csv')
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Clear Useless Variables
testing$Ticket <- NULL
testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
test.h2o <- as.h2o(localH2O, testing, key='test.hex')
predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
Survived = predictions$predict)
write.csv(submit, file = "submittion_111314_cinco.csv", row.names = FALSE)
set.seed(9841651)
set <- read.csv('train.csv')
backup <- set
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=20, epochs=10,
hidden=c(15,15,15,15,15),
activation='RectifierWithDropout',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- h2o.predict(model.nn,newdata=valid.h2o)
h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
set <- backup
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=20, epochs=10,
hidden=c(15,15,15,15,15),
activation='Tanh',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- h2o.predict(model.nn,newdata=valid.h2o)
h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
set <- backup
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=20, epochs=10,
hidden=c(15,15,15,15,15),
activation='Tanh',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- h2o.predict(model.nn,newdata=valid.h2o)
h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
set.seed(45684812)
testing <- read.csv('test.csv')
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Clear Useless Variables
testing$Ticket <- NULL
testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
test.h2o <- as.h2o(localH2O, testing, key='test.hex')
# ========================Submitting Stuff
predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
Survived = predictions$predict)
write.csv(submit, file = "submittion_111314_seis.csv", row.names = FALSE)
modelFinal <- model.nn
set.seed(45684812)
testing <- read.csv('test.csv')
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Clear Useless Variables
testing$Ticket <- NULL
testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
test.h2o <- as.h2o(localH2O, testing, key='test.hex')
# ========================Submitting Stuff
predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
Survived = predictions$predict)
write.csv(submit, file = "submittion_111314_seis.csv", row.names = FALSE)
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
set.h2o <- as.h2o(localH2O, set, key='set.hex')
indy <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
depy <- 'Survived'
model.nn <- h2o.deeplearning(x=indy,y=depy,
data=train.h2o,
classification=TRUE,
nfolds=20, epochs=10,
hidden=c(15,15,15,15,15),
activation='Tanh',
balance_classes=TRUE,
single_node_mode=TRUE,
l1=0.00000001,l2=0.00000001,
seed=999845)
predictions <- h2o.predict(model.nn,newdata=valid.h2o)
h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
??h2o.kmeans
h2o.shutdown(localH2O)
