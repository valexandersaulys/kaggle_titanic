method='ada',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
getModelInfo(ada)
getModelInfo('ada')
model_ada <- train(Survived ~ ., data=training,
method='ada',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3,
type='Classification')
getModelInfo('ada', forClass=TRUE)
getModelInfo('ada', forClass)
modelLookup('ada',forClass)
model_ada <- train(Survived ~ ., data=training,
method='ada',
preProcess=NULL,
type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
View(training['Survived'])
View(training['Survived',])
rm(list = ls())
library(caret)
library(ada)
set.seed(6645)
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
ctrl <- trainControl(
method='repeatecv',
number=10,
repeats=5)
TG <- data.frame(
iter=50,
maxdepth=50,
nu=0.1  )
indy <- training[!names(training) %in% c('Survived')]
depy <- training['Survived']
model_ada <- train(x=,
y=,
method='ada',
preProcess=NULL,
type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
model_ada <- train(x=indy,
y=depy,
method='ada',
preProcess=NULL,
type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
??getModelInfo()
modelLookup('ada')
model_ada <- train(x=indy,
y=depy,
method='ada',
preProcess=NULL,
#type='Classification',
#trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
depy <- as.factor(training['Survived'])
depy <- as.factor(training$Survived)
model_ada <- train(x=indy,
y=depy,
method='ada',
preProcess=NULL,
#type='Classification',
#trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
warnings()
TG <- data.frame(
iter=500,
maxdepth=30,
nu=0.1  )
model_ada <- train(x=indy,
y=depy,
method='ada',
preProcess=NULL,
#type='Classification',
#trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
ctrl <- trainControl(
method='repeatecv',
number=10,
repeats=5)
TG <- data.frame(
iter=50,
maxdepth=30,
nu=0.1  )
indy <- training[!names(training) %in% c('Survived')]
depy <- as.factor(training$Survived)
model_ada <- train(x=indy,
y=depy,
method='ada',
preProcess=NULL,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
indy <- training[!names(training) %in% c('Survived')]
depy <- as.factor(training$Survived)
model_ada <- train(x=indy,
y=depy,
method='ada',
#preProcess=NULL,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
model_ada <- train(x=indy,
y=depy,
method='ada',
#preProcess=NULL,
#type='Classification',
#trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
ctrl <- trainControltrainControl(
method = "repeatedcv",
number=10,
repeats=5,
returnResamp = "all",
classProbs = TRUE  )
ctrl <- trainControl(
method = "repeatedcv",
number=10,
repeats=5,
returnResamp = "all",
classProbs = TRUE  )
model_ada <- train(x=indy,
y=depy,
method='ada',
#preProcess=NULL,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
predictions <- predict(model_ada,validation)
confusionMatrix(predictions$predict, validation$Survived)
View(predictions)
confusionMatrix(predictions, validation$Survived)
modelFinal <- model_ada
testing <- read.csv('test.csv')
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Clear Useless Variables
testing$Ticket <- NULL
testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
#test.h2o <- as.h2o(localH2O, testing, key='test.hex')
# ========================Submitting Stuff
#predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
#submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
#                    Survived = predictions$predict)
predictions <- predict(model_ada, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=predictions)
write.csv(submit, file = "submittion_111614_uno.csv", row.names = FALSE)
predictions <- predict(model_ada, testing)
??predict()
predictions <- predict(modelFinal, testing)
View(testing)
modelFinal <- model_ada
set.seed(45684812)
testing <- read.csv('test.csv')
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Clear Useless Variables
testing$Ticket <- NULL
testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
#test.h2o <- as.h2o(localH2O, testing, key='test.hex')
# ========================Submitting Stuff
#predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
#submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
#                    Survived = predictions$predict)
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=predictions)
write.csv(submit, file = "submittion_111614_uno.csv", row.names = FALSE)
View(testing)
View(predictions)
View(validation)
type()
modelFinal
predictions <- predict(modelFinal, testing)
View(testing)
levels(testing$Title)
testing[Title='Dona']
testing[Title=='Dona']
testing[Title=='Dona',]
testing[testing$Title=='Dona']
testing[testing$Title=='Dona',]
testing <- read.csv('test.csv')
View(testing)
levels(validation)
levels(validation$Title)
testing <- read.csv('test.csv')
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Clear Useless Variables
testing$Ticket <- NULL
testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
#test.h2o <- as.h2o(localH2O, testing, key='test.hex')
# ========================Submitting Stuff
#predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
#submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
#                    Survived = predictions$predict)
testing[testing$Title=='Dona',]$Title <- 'Don'
testing[testing$Title=='Dona',]$Title <- as.factor('Don')
testing[testing$Title=='Dona',]$Title <- as.factor(Don)
testing[testing$Title=='Dona',]
testing[testing$PassengerId==1306,]
testing[testing$PassengerId==1306,]$Title = 'Don'
testing[testing$PassengerId==1306,]$Title = as.factor('Don')
testing[testing$PassengerId==1306,]$Title = as.factor(Don)
Don <- 'Don'
testing[testing$PassengerId==1306,]$Title = as.factor(Don)
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=predictions)
write.csv(submit, file = "submittion_111614_uno.csv", row.names = FALSE)
getModelInfo('rf')
rm(list = ls())
library(caret)
library(ada)
set.seed(6645)
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
ctrl <- trainControl(
method = "repeatedcv",
number=10,
repeats=5,
returnResamp = "all",
classProbs = TRUE  )
TG <- data.frame(
iter=50,
maxdepth=30,
nu=0.1  )
indy <- training[!names(training) %in% c('Survived')]
depy <- as.factor(training$Survived)
model_ada <- train(x=indy,
y=depy,
method='ada',
#preProcess=NULL,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
model_rf <- train(x=indy,
y=depy,
method='rf',
#preProcess=NULL,
#type='Classification',
trControl=ctrl,
#tuneGrid=RF,
tuneLength=3)
model_rf
predictions <- predict(model_rf,validation)
confusionMatrix(predictions,validation$Survived)
warnings()
getModelInfo('svm')
getModelInfo('svmLinear')
library(caret)
getModelInfo('svmLinear')
getModelInfo('svmRadial')
model_svmRad <- train(x=indy,
y=depy,
method='lssvmRadial',
#preProcess=NULL,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_svmRad
TG <- data.frame(
sigma=0.00224)
model_svmRad <- train(x=indy,
y=depy,
method='lssvmRadial',
#preProcess=NULL,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_svmRad
warnings()
TG <- data.frame(
iter=50,
maxdepth=30,
nu=0.01  )
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
indy <- training[!names(training) %in% c('Survived')]
depy <- as.factor(training$Survived)
model_ada <- train(x=indy,
y=depy,
method='ada',
#preProcess=NULL,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
TG <- data.frame(
iter=500,
maxdepth=30,
nu=0.00001  )
model_ada <- train(x=indy,
y=depy,
method='ada',
#preProcess=NULL,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
predictions <- predict(model_ada,validation)
confusionMatrix(predictions, validation$Survived)
modelFinal <- model_ada
set.seed(45684812)
testing <- read.csv('test.csv')
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Clear Useless Variables
testing$Ticket <- NULL
testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
#test.h2o <- as.h2o(localH2O, testing, key='test.hex')
# ========================Submitting Stuff
#predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
#submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
#                    Survived = predictions$predict)
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=predictions)
write.csv(submit, file = "submittion_111614_dos.csv", row.names = FALSE)
levels(testing$Title)
testing[testing$Title=='Dona',]$Title <- "Don"
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=predictions)
write.csv(submit, file = "submittion_111614_dos.csv", row.names = FALSE)
??train()
nukem <- 'pca'
model_ada <- train(x=indy,
y=depy,
method='ada',
preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
warnings()
nukem <- 'BoxCox'
model_ada <- train(x=indy,
y=depy,
method='ada',
preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
getModelInfo
install.packages('earth')
install.packages('mda')
TG <- data.frame(
degree=15,
nprune=15)
model_bagFDA <- train(x=indy,
y=depy,
method='bagFDA',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
warnings()
model_bagFDA <- train(x=indy,
y=depy,
method='bagFDA',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
#tuneGrid=TG,
tuneLength=3)
warnings()
TG <- data.frame(
degree=3,
nprune=7)
nukem <- 'BoxCox'
indy <- training[!names(training) %in% c('Survived')]
depy <- as.factor(training$Survived)
model_bagFDA <- train(x=indy,
y=depy,
method='bagFDA',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_bagFDA <- train(x=indy,
y=depy,
method='gbm',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
#tuneGrid=TG,
tuneLength=3)
model_bagFDA
predictions <- predict(model_bagFDA,validation)
confusionMatrix(predictions, validation$Survived)
