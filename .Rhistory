#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Clear Useless Variables
testing$Ticket <- NULL
testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
#test.h2o <- as.h2o(localH2O, testing, key='test.hex')
# ========================Submitting Stuff
#predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
#submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
#                    Survived = predictions$predict)
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=predictions)
write.csv(submit, file = "submittion_111614_dos.csv", row.names = FALSE)
levels(testing$Title)
testing[testing$Title=='Dona',]$Title <- "Don"
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=predictions)
write.csv(submit, file = "submittion_111614_dos.csv", row.names = FALSE)
??train()
nukem <- 'pca'
model_ada <- train(x=indy,
y=depy,
method='ada',
preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
warnings()
nukem <- 'BoxCox'
model_ada <- train(x=indy,
y=depy,
method='ada',
preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_ada
getModelInfo
install.packages('earth')
install.packages('mda')
TG <- data.frame(
degree=15,
nprune=15)
model_bagFDA <- train(x=indy,
y=depy,
method='bagFDA',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
warnings()
model_bagFDA <- train(x=indy,
y=depy,
method='bagFDA',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
#tuneGrid=TG,
tuneLength=3)
warnings()
TG <- data.frame(
degree=3,
nprune=7)
nukem <- 'BoxCox'
indy <- training[!names(training) %in% c('Survived')]
depy <- as.factor(training$Survived)
model_bagFDA <- train(x=indy,
y=depy,
method='bagFDA',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
tuneGrid=TG,
tuneLength=3)
model_bagFDA <- train(x=indy,
y=depy,
method='gbm',
#preProcess=nukem,
#type='Classification',
trControl=ctrl,
#tuneGrid=TG,
tuneLength=3)
model_bagFDA
predictions <- predict(model_bagFDA,validation)
confusionMatrix(predictions, validation$Survived)
library(ggplot2)
??geom_point()
??ggplot()
View(training)
attach(training)
ggplot(data=training, aes(Pclass,Fare)) +
geom_point(aes(colour=Survived))
ggplot(data=training, aes(FamilySize,Fare)) +
geom_point(aes(colour=Survived))
ggplot(data=training, aes(FamilySize,Fare)) +
geom_point(
aes(colour=factor(Survived))
)
ggplot(data=training, aes(Age,Fare)) +
geom_point(
aes(colour=factor(Survived))
)
??lm()
fit <- lm(
Survived ~ .,
data=training
)
curve(fit)
summary(fit)
plot(fit)
fit <- lm(
Survived ~ Sex + PClass + FamilySize,
data=training
)
attach(training)
fit <- lm(
Survived ~ Sex + Pclass + FamilySize,
data=training
)
plot(fit)
summary(fit)
predict(fit, validation)
predictions <- predict(fit, validation)
View(predictions)
View(validation)
validation$lmpred <- round(predictions$x, digits=0)
validation$lmpred <- round(predictions, digits=0)
confusionMatrix(validation$lmpred, validation$Survived)
library(caret)
predictions <- predict(fit, validation)
confusionMatrix(validation$lmpred, validation$Survived)
fit <- lm(
Survived ~ Sex + Pclass + FamilySize + Title,
data=training
)
predictions <- predict(fit, validation)
fit <- lm(
Survived ~ Sex + Pclass + FamilySize + Age,
data=training
)
predictions <- predict(fit, validation)
confusionMatrix(validation$lmpred, validation$Survived)
plot(Survived, Sex)
plot(Survived, Pclass)
plot(Survived, FamilySize)
plot(Survived, Age)
fit <- lm(
Survived ~ Sex + Pclass + FamilySize + Age + Fare,
data=training
)
predictions <- predict(fit, validation)
confusionMatrix(validation$lmpred, validation$Survived)
fit <- glm(
Survived ~ Sex + Pclass + FamilySize + Age + Fare,
data=training
)
predictions <- predict(fit, validation)
confusionMatrix(validation$lmpred, validation$Survived)
??glm()
fit <- glm(
Survived ~ Sex * Pclass * FamilySize * Age * Fare,
data=training
)
predictions <- predict(fit, validation)
confusionMatrix(validation$lmpred, validation$Survived)
rm(fit)
fit <- lm(
Survived ~ Sex * Pclass * FamilySize * Age * Fare,
data=training
)
predictions <- predict(fit, validation)
confusionMatrix(validation$lmpred, validation$Survived)
fit <- lm(
Survived ~ Fare,
data=training
)
predictions <- predict(fit, validation)
confusionMatrix(validation$lmpred, validation$Survived)
View(lm)
summary(lm)
summary(fit)
predictions <- predict(fit, validation)
View(predictions)
predictions <- predict(fit, validation)
validation$lmped <- round(predictions,digit=0)
confusionMatrix(validation$lmpred, validation$Survived)
predictions <- predict(fit, validation)
validation$lmped <- round(predictions,digit=0)
confusionMatrix(validation$lmpred, validation$Survived)
fit <- lm(
Survived ~ Sex,# * Pclass * FamilySize * Age * Fare,
data=training
)
predictions <- predict(fit, validation)
validation$lmped <- round(predictions,digit=0)
confusionMatrix(validation$lmpred, validation$Survived)
View(fit)
View(lm)
summary(fit)
??predict()
??predict.lm
??formula
??lm
ggplot(data=training, aes(Age,Fare)) +
geom_point(
aes(colour=factor(Survived))
)
ggplot(data=training, aes(Age^Pclass,Fare)) +
geom_point(
aes(colour=factor(Survived))
)
focue <- formula(
Survived ~ Fare + Age^Pclass
)
fit <- lm(
formula=focus,
data=training
)
fit <- lm(
formula=focue,
data=training
)
ggplot(data=training, aes(Age*Pclass,Fare)) +
geom_point(
aes(colour=factor(Survived))
)
focue <- formula(
Survived ~ Fare + Age*Pclass
)
fit <- lm(
formula=focue,
data=training
)
predictions <- predict(fit, validation)
validation$lmped <- round(predictions,digit=0)
confusionMatrix(validation$lmpred, validation$Survived)
focue <- formula(
Survived ~ Fare + Age#*Pclass
)
fit <- lm(
formula=focue,
data=training
)
#predictions <- predict(fit, validation)
predictions2 <- predict(fit, validation)
View(predictions)
View(predictions2)
validation$lmped <- round(predictions,digit=0)
confusionMatrix(predictions2, validation$Survived)
confusionMatrix(as.factor(predictions2), validation$Survived)
confusionMatrix(as.factor(predictions2), as.factor(validation$Survived))
attach(validation)
confusionMatrix(predictions,Survived)
attach(training)
ggplot(data=training, aes(Age*Pclass,Fare)) +
geom_point(
aes(colour=factor(Survived))
)
focue <- formula(
Survived ~ Fare + Age#*Pclass
)
fit <- lm(
formula=focue,
data=training
)
View(fit)
summary(fit)
focue <- formula(
Survived ~ Fare + Age*Pclass
)
fit2 <- lm(
formula=focue,
data=training
)
sumary(fit2)
summary(fit2)
attach(training)
ggplot(data=training, aes(log(Pclass),Fare)) +
geom_point(
aes(colour=factor(Survived))
)
ggplot(data=training, aes(log(Age),Fare)) +
geom_point(
aes(colour=factor(Survived))
)
training[Age=='NA',] <- 0
training[,Age=='NA'] <- 0
training[is.na(Age),] <- 0
View(training)
View(validation)
rm(list = ls())
library(caret)
library(ada)
set.seed(6645)
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
attach(training)
View(training)
backup <- training
#plotting bits
training[is.na(Age),] <- 0
View(training)
training <- backup
attach(training)
training[,is.na(Age)] <- 0
training[is.na(Age),]$Age <- 0
View(training)
ggplot(data=training, aes(log(Age),Fare)) +
geom_point(
aes(colour=factor(Survived))
)
ggplot(data=training, aes(Sex,Fare)) +
geom_point(
aes(colour=factor(Survived))
)
focue <- formula(
Survived ~ Fare + Age*Pclass
)
focue <- formula(
Survived ~ Fare + Age + Sex + Pclass
)
fit2 <- lm(
formula=focue,
data=training
)
predictions2 <- predict(fit2, validation)
validation$ped2 <- round(predictions,digit=0)
validation$ped2 <- round(predictions2,digit=0)
confusionMatrix(validation$pred2, validation$Survived)
View(validation)
validation[is.na(Age),] <- 0
rm(list = ls())
library(caret)
library(ada)
set.seed(6645)
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
attach(training)
training[is.na(Age),]$Age <- 0
validation[is.na(Age),]$Age <- 0
View(validation)
validation[is.na(Age),]$Age <- 0
rm(list = ls())
library(caret)
library(ada)
set.seed(6645)
set <- read.csv('train.csv')
backup <- set
# Prepping Ze Data
# First separates titles from names and then removes the name variables
set$Name <- as.character(set$Name)
set$Title <- sapply(set$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
set$Title <- sub(' ', '', set$Title)
set$Title <- factor(set$Title)
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Clear Useless Variables
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
# randomize the set
nr<-dim(set)[1]
set[sample.int(nr),]
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
training[is.na(training$Age),]$Age <- 0
ggplot(data=training, aes(training$Sex,training$Fare)) +
geom_point(
aes(colour=factor(training$Survived))
)
focue <- formula(
Survived ~ Fare + Age + Sex + Pclass
)
fit2 <- lm(
formula=focue,
data=training
)
validation[is.na(validation$Age),]$Age <- 0
predictions2 <- predict(fit2, validation)
validation$ped2 <- round(predictions2,digit=0)
confusionMatrix(validation$pred2, validation$Survived)
View(validation)
confusionMatrix(validation$ped2, validation$Survived)
focue <- formula(
Survived ~ Fare + Age + Sex + Pclass + FamilySize + Title
)
fit3 <- lm(
formula=focue,
data=training
)
validation[is.na(validation$Age),]$Age <- 0
#predictions <- predict(fit, validation)
predictions3 <- predict(fit3, validation)
validation$pred3 <- round(predictions3,digit=0)
confusionMatrix(validation$pred3, validation$Survived)
predictions3 <- predict(fit3, validation)
validation$pred3 <- round(predictions3,digit=0)
confusionMatrix(validation$pred3, validation$Survived)
focue <- formula(
Survived ~ Fare + Age + Sex + Pclass + FamilySize #+ Title
)
fit3 <- lm(
formula=focue,
data=training
)
predictions3 <- predict(fit3, validation)
validation$pred3 <- round(predictions3,digit=0)
confusionMatrix(validation$pred3, validation$Survived)
modelFinal <- fit3
set.seed(45684812)
testing <- read.csv('test.csv')
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Clear Useless Variables
testing$Ticket <- NULL
testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
#test.h2o <- as.h2o(localH2O, testing, key='test.hex')
# ========================Submitting Stuff
#predictions <- as.data.frame(h2o.predict(modelFinal,newdata=test.h2o))
#submit <- data.frame(PassengerId=as.data.frame(test.h2o)$PassengerId,
#                    Survived = predictions$predict)
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=predictions)
write.csv(submit, file = "submittion_111714_unos.csv", row.names = FALSE)
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=round(predictions,digit=0))
write.csv(submit, file = "submittion_111714_unos.csv", row.names = FALSE)
View(submit)
View(testing)
testing[is.na(testing$Age),]$Age <- 0
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=round(predictions,digit=0))
write.csv(submit, file = "submittion_111714_unos.csv", row.names = FALSE)
View(submit)
View(testing)
levels(submit$Survived)
summary(submit$Survived)
testing[is.na(testing$Fare),]$Fare <- 0
predictions <- predict(modelFinal, testing)
submit <- data.frame(PassengerId=testing$PassengerId, Survived=round(predictions,digit=0))
write.csv(submit, file = "submittion_111714_unos.csv", row.names = FALSE)
