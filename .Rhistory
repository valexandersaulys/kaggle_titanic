# Cabin or not?
set$Cabin <- as.character(set$Cabin)
set[set$Cabin=="",]$Cabin <- 0
set[set$Cabin != "0",]$Cabin <- 1
set$Cabin <- as.numeric(set$Cabin)
# Gender to binary
set$Sex <- as.character(set$Sex)
set[set$Sex=='male',]$Sex <- '1'
set[set$Sex=='female',]$Sex <- '0'
set$Sex <- as.numeric(set$Sex)
# Clear Useless Variables
set$Ticket <- NULL
set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
# Classification Tree with rpart
library(rpart)
# grow tree
fit <- rpart(Survived ~ .,
method="class",
data=training)
# prune the tree
model_rpart <- prune(fit,
cp = fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
model_rpart
predictions <- predict(model_rpart,validation)
confusionMatrix(predictions, validation$Survived)
View(predictions)
confusionMatrix(round(predictions$0,digits=0), validation$Survived)
validation$preds <- round(predictions$0,digits=0)
validation$preds <- as.numeric(round(predictions$0,digits=0))
str(predictions)
validation$preds <- as.numeric(round(predictions[[1]],digits=0))
View(validation)
predictions[predictions[[1]]>=predictions[[2]]]$final <- 0
predictions[predictions[1,]>=predictions[2,]]$final <- 0
predictions[predictions[,1]>=predictions[,2]]$final <- 0
predictions[predictions['0']>=predictions['1']]$final <- 0
predictions['0']
predictions[[1]]
predictions[1,]
prediction[1]
predictions[1]
predictions[,1]
predictions[1,1]
predictions[1]
predictions[[2]]
View(predictions$0)
View(predictions$O)
colnames(predictions)
colnames(predictions) <- c("zero", "one")
View(predictions)
predictions <- predict(model_rpart,validation)
colnames(predictions) <- c("zero", "one")
View(predictions)
predictions[predictions$zero >= predictions$one]$final <- 0
View(predictions)
predictions[predictions$zero >= predictions$one,]$final <- 0
predictions[predictions$zero > predictions$one,]$final <- 0
predictions[ zero > one,]$final <- 0
predictions[predictions$one >= predictions$zero,]$final <- 1
View(predictions$one)
predictions <- as.data.frame(predictions)
predictions[predictions$one >= predictions$zero,]$final <- 1
predictions[ predictions$zero >= predictions$one,]$final <- 0
View(predictions)
predictions$final <- 0
predictions[ predictions$zero >= predictions$one,]$final <- 0
predictions[predictions$one >= predictions$zero,]$final <- 1
confusionMatrix(predictions$final, validation$Survived)
View(validation)
modelFinal<- model_rpart
testing <- read.csv('test.csv', stringsAsFactors=FALSE)
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
#testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Create Find age median and replace it in the missing values
male_median <- median(testing[testing$Sex=='male',]$Age)
female_median <- median(testing[testing$Sex=='female',]$Age)
testing[is.na(testing$Age) & testing$Sex=='male',]$Age <- male_median
testing[is.na(testing$Age) & testingt$Sex=='female',]$Age <- female_median
# Cabin or not?
testing$Cabin <- as.character(set$Cabin)
testing[testing$Cabin=="",]$Cabin <- 0
testing[testing$Cabin != "0",]$Cabin <- 1
testing$Cabin <- as.numeric(testing$Cabin)
# Gender to binary
testing$Sex <- as.character(testing$Sex)
testing[testing$Sex=='male',]$Sex <- '1'
testing[testing$Sex=='female',]$Sex <- '0'
testing$Sex <- as.numeric(testing$Sex)
# Clear Useless Variables
testing$Ticket <- NULL
#testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
testing$Title <- NULL
testing <- read.csv('test.csv', stringsAsFactors=FALSE)
# Setup h2o
#localH2O  <- h2o.init(max_mem_size='6g')
# Prepping Ze Data
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
#testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Create Find age median and replace it in the missing values
male_median <- median(testing[testing$Sex=='male',]$Age)
female_median <- median(testing[testing$Sex=='female',]$Age)
testing[is.na(testing$Age) & testing$Sex=='male',]$Age <- male_median
testing[is.na(testing$Age) & testing$Sex=='female',]$Age <- female_median
# Cabin or not?
testing$Cabin <- as.character(set$Cabin)
testing[testing$Cabin=="",]$Cabin <- 0
testing[testing$Cabin != "0",]$Cabin <- 1
testing$Cabin <- as.numeric(testing$Cabin)
# Gender to binary
testing$Sex <- as.character(testing$Sex)
testing[testing$Sex=='male',]$Sex <- '1'
testing[testing$Sex=='female',]$Sex <- '0'
testing$Sex <- as.numeric(testing$Sex)
# Clear Useless Variables
testing$Ticket <- NULL
#testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
testing$Title <- NULL
View(testing)
predictions <- as.data.frame(predict(modelFinal,testing))
colnames(predictions) <- c("zero", "one")
predictions$final <- 0
predictions[ predictions$zero >= predictions$one,]$final <- 0
predictions[predictions$one >= predictions$zero,]$final <- 1
testing$Survived <- predictions$final
submit <- data.frame(PassengerId=testing$PassengerId, Survived=testing$Survived)
write.csv(submit, file = "submittion_111814_uno.csv", row.names = FALSE)
rm(list = ls())
library(caret)
library(h2o)
set.seed(6645)
set <- read.csv('train.csv')
backup <- set
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Create Find age median and replace it in the missing values
male_median <- median(set[set$Sex=='male',]$Age)
female_median <- median(set[set$Sex=='female',]$Age)
set[is.na(set$Age) & set$Sex=='male',]$Age <- male_median
set[is.na(set$Age) & set$Sex=='female',]$Age <- female_median
# Create Age^Fare Variable
#set$AgeFare <- set$Age^set$Fare
# Cabin or not?
set$Cabin <- as.character(set$Cabin)
set[set$Cabin=="",]$Cabin <- 0
set[set$Cabin != "0",]$Cabin <- 1
set$Cabin <- as.numeric(set$Cabin)
# Gender to binary
set$Sex <- as.character(set$Sex)
set[set$Sex=='male',]$Sex <- '1'
set[set$Sex=='female',]$Sex <- '0'
set$Sex <- as.numeric(set$Sex)
# Clear Useless Variables
set$Ticket <- NULL
#set$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
#
#  Begin NEural Network Learning Sequence
#
localH2O  <- h2o.init(Xmx = '6g' )
h2o.clusterInfo(localH2O)
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
View(train.h2o)
independent <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
dependent <- 'Survived'
model.h2o <- h2o.deeplearning(x=independent, y=dependent, data=train.h2o
,classification=TRUE
,activation = 'Rectifier'
,hidden = c(30,30)
,epochs = 1000.0
,train_samples_per_iteration = -1
,adaptive_rate = TRUE
,rho = 0.999
,epsilon = 1e-6
,input_dropout_ratio = 0.0
,score_interval = 5.0
,variable_importances = TRUE
,diagnostics = TRUE
,single_node_mode = TRUE
)
model.h2o
predictions <- h2o.predict(model.h2o, valid.h2o)
mats <- h2o.confusionMatrix(predictions,valid.h2o)
View(predictions)
mats <- h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
mats
model.h2o <- h2o.deeplearning(x=independent, y=dependent, data=train.h2o
,classification=TRUE
,activation = 'Rectifier'
,nfolds=10
,hidden = c(15,15,15)
,epochs = 1000.0
,train_samples_per_iteration = -1
,adaptive_rate = TRUE
,rho = 0.999
,epsilon = 1e-6
,input_dropout_ratio = 0.0
,score_interval = 5.0
,variable_importances = TRUE
,diagnostics = TRUE
,single_node_mode = TRUE
)
model.h2o
predictions <- h2o.predict(model.h2o, valid.h2o)
mats <- h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
mats
testing <- read.csv('test.csv')
test.h2o <- as.h2o(localH2O, testing, key='test.hex')
predictions <- h2o.predict(model.h2o,test.h2o)
testing <- read.csv('test.csv', stringsAsFactors=FALSE)
# First separates titles from names and then removes the name variables
testing$Name <- as.character(testing$Name)
testing$Title <- sapply(testing$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
testing$Title <- sub(' ', '', testing$Title)
#testing$Title <- factor(testing$Title)
testing$FamilySize <- testing$SibSp + testing$Parch + 1
# Create Find age median and replace it in the missing values
male_median <- median(testing[testing$Sex=='male',]$Age)
female_median <- median(testing[testing$Sex=='female',]$Age)
testing[is.na(testing$Age) & testing$Sex=='male',]$Age <- male_median
testing[is.na(testing$Age) & testing$Sex=='female',]$Age <- female_median
# Cabin or not?
testing$Cabin <- as.character(set$Cabin)
testing[testing$Cabin=="",]$Cabin <- 0
testing[testing$Cabin != "0",]$Cabin <- 1
testing$Cabin <- as.numeric(testing$Cabin)
# Gender to binary
testing$Sex <- as.character(testing$Sex)
testing[testing$Sex=='male',]$Sex <- '1'
testing[testing$Sex=='female',]$Sex <- '0'
testing$Sex <- as.numeric(testing$Sex)
# Clear Useless Variables
testing$Ticket <- NULL
#testing$Cabin <- NULL #thinking the incomplete natre of cabin can be handled by h2o
testing$Name <- NULL
testing$SibSp <- NULL
testing$Parch <- NULL
testing$Embarked <- NULL
testing$Title <- NULL
test.h2o <- as.h2o(localH2O, testing, key='test.hex')
predictions <- h2o.predict(model.h2o,test.h2o)
submit <- data.frame(PassengerId=test.h2o$PassengerId, Survived=predictions$predict)
write.csv(submit,file='submittion_111814_dos')
submit <- data.frame(PassengerId=as.numeric(test.h2o$PassengerId),
Survived=predictions$predict)
write.csv(submit,file='submittion_111814_dos')
View(predictions)
View(test.h2o)
submit <- data.frame(PassengerId=test.h2o$PassengerId,
Survived=as.numeric(predictions$predict))
typeof(predictions)
predictions <- as.data.frame(h2o.predict(model.h2o,test.h2o))
submit <- data.frame(PassengerId=test.h2o$PassengerId,
Survived=as.numeric(predictions$predict))
submit <- data.frame(PassengerId=testing$PassengerId,
Survived=predictions$predict)
write.csv(submit,file='submittion_111814_dos')
View(submit)
write.csv(submit,file='submittion_111814_dos',row.names=FALSE)
mats
mats <- confusionMatrix(predictions$predict,valid.h2o$Survived)
mats <- h2o.confusionMatrix(predictions$predict,valid.h2o$Survived)
mats <- confusionMatrix(validation$pred, validation$Survived)
levels(validation)
levels(validation$pred)
typeof(validation)
str(validation)
validation$pred <- predictions$predict
predictions <- h2o.predict(model.h2o, valid.h2o)
validation$pred <- predictions$predict
mats <- confusionMatrix(validation$pred, validation$Survived)
str(validation)
validation$pred <- as.numeric(predictions$predict)
predictions <- as.data.frame(h2o.predict(model.h2o, valid.h2o))
validation$pred <- as.numeric(predictions$predict)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
model.h2o <- h2o.deeplearning(x=independent, y=dependent, data=train.h2o
,classification=TRUE
,activation = 'Rectifier'
,nfolds=10
,hidden = c(15,15,15,15,15)
,epochs = 1000.0
,train_samples_per_iteration = -1
,adaptive_rate = TRUE
,rho = 0.999
,epsilon = 1e-6
,input_dropout_ratio = 0.0
,score_interval = 5.0
,variable_importances = TRUE
,diagnostics = TRUE
,single_node_mode = TRUE
)
model.h2o
predictions <- as.data.frame(h2o.predict(model.h2o, valid.h2o))
validation$pred <- as.numeric(predictions$predict)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
model.h2o <- h2o.glm(x=independent, y=dependent, data=train.h2o
,nfolds=10
)
model.h2o
predictions <- as.data.frame(h2o.predict(model.h2o, valid.h2o))
validation$pred <- as.numeric(predictions$predict)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
independent <- names(train.h2o)[!names(train.h2o) %in% c('Survived','PassengerId')]
model.h2o <- h2o.glm(x=independent, y=dependent, data=train.h2o
,nfolds=10
)
model.h2o
predictions <- as.data.frame(h2o.predict(model.h2o, valid.h2o))
validation$pred <- as.numeric(predictions$predict)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
independant
independent
model.h2o <- h2o.glm(x=independent, y=dependent, data=train.h2o
,nfolds=10
,family='gaussian'
,link='identity'
)
model.h2o
predictions <- as.data.frame(h2o.predict(model.h2o, valid.h2o))
validation$pred <- as.numeric(predictions$predict)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
View(validation)
predictions <- as.data.frame(h2o.predict(model.h2o, valid.h2o))
validation$pred <- round(as.numeric(predictions$predict),digits=0)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
model.h2o <- h2o.glm(x=independent, y=dependent, data=train.h2o
,nfolds=10
,family='poisson'
,link='identity'
)
model.h2o
predictions <- as.data.frame(h2o.predict(model.h2o, valid.h2o))
validation$pred <- round(as.numeric(predictions$predict),digits=0)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
model.h2o <- h2o.glm(x=independent, y=dependent, data=train.h2o
,nfolds=10
,family='gamma'
,link='identity'
)
model.h2o
predictions <- as.data.frame(h2o.predict(model.h2o, valid.h2o))
validation$pred <- round(as.numeric(predictions$predict),digits=0)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
model.h2o <- h2o.glm(x=independent, y=dependent, data=train.h2o
,nfolds=10
,family='gaussian'
#,link='identity'
)
model.h2o
predictions <- as.data.frame(h2o.predict(model.h2o, valid.h2o))
validation$pred <- round(as.numeric(predictions$predict),digits=0)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm(list = ls())
library(caret)
library(h2o)
set.seed(6645)
set <- read.csv('train.csv')
backup <- set
# Create a Family Size Variable
set$FamilySize <- set$SibSp + set$Parch + 1
# Create Find age median and replace it in the missing values
male_median <- median(set[set$Sex=='male',]$Age)
female_median <- median(set[set$Sex=='female',]$Age)
set[is.na(set$Age) & set$Sex=='male',]$Age <- male_median
set[is.na(set$Age) & set$Sex=='female',]$Age <- female_median
# Cabin or not?
set$Cabin <- as.character(set$Cabin)
set[set$Cabin=="",]$Cabin <- 0
set[set$Cabin != "0",]$Cabin <- 1
set$Cabin <- as.numeric(set$Cabin)
# Gender to binary
set$Sex <- as.character(set$Sex)
set[set$Sex=='male',]$Sex <- '1'
set[set$Sex=='female',]$Sex <- '0'
set$Sex <- as.numeric(set$Sex)
# Clear Useless Variables
set$Ticket <- NULL
set$Name <- NULL
set$SibSp <- NULL
set$Parch <- NULL
set$Embarked <- NULL
dataPart <- createDataPartition(set$Survived,p=0.7, list=FALSE)
training <- set[dataPart,]
validation <- set[-dataPart,]
#
#  Begin NEural Network Learning Sequence
#
localH2O  <- h2o.init(Xmx = '6g' )
h2o.clusterInfo(localH2O)
train.h2o <- as.h2o(localH2O, training, key='train.hex')
valid.h2o <- as.h2o(localH2O, validation, key='valid.hex')
independent <- names(train.h2o)[!names(train.h2o) %in% c('Survived')]
dependent <- 'Survived'
model_rf <- h2o.randomForest(x=independent,y=dependent,data=train.h2o
,key='model.hex'
,classification=TRUE
,ntree=500
,depth=30
,nfolds=10
,balance.classes=FALSE
,type='BigData'
)
predictions <- as.data.frame(h2o.predict(model_rf, valid.h2o))
validation$pred <- as.numeric(predictions$predict)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
model_rf <- h2o.randomForest(x=independent,y=dependent,data=train.h2o
,key='model.hex'
,classification=TRUE
,ntree=500
,depth=30
,nfolds=10
,balance.classes=TRUE
,type='BigData'
)
predictions <- as.data.frame(h2o.predict(model_rf, valid.h2o))
validation$pred <- as.numeric(predictions$predict)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
model_rf <- h2o.randomForest(x=independent,y=dependent,data=train.h2o
,key='model.hex'
,classification=TRUE
,ntree=1000
,depth=30
,nfolds=10
,nbins=20
,stat.type='ENTROPY'
,balance.classes=TRUE
,type='BigData'
)
predictions <- as.data.frame(h2o.predict(model_rf, valid.h2o))
validation$pred <- as.numeric(predictions$predict)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
model_rf <- h2o.randomForest(x=independent,y=dependent,data=train.h2o
,key='model.hex'
,classification=TRUE
,ntree=1000
,depth=30
,nfolds=10
,nbins=20
,stat.type='GINI'
,balance.classes=TRUE
,type='BigData'
)
predictions <- as.data.frame(h2o.predict(model_rf, valid.h2o))
validation$pred <- as.numeric(predictions$predict)
mats <- confusionMatrix(validation$pred, validation$Survived)
mats
model_nn <- h2o.deeplearning(x=independent, y=dependent, data=train.h2o
,classification=TRUE
,activation = 'Rectifier'
,nfolds=10
,hidden = c(15,15,15,15,15)
,epochs = 1000.0
,train_samples_per_iteration = -1
,adaptive_rate = TRUE
,rho = 0.999
,epsilon = 1e-6
,input_dropout_ratio = 0.0
,score_interval = 5.0
,variable_importances = TRUE
,diagnostics = TRUE
,single_node_mode = TRUE
)
df.h20 <- h2o.deepfeatures(train.h2o,model_nn)
df.h2o
df.h20
View(df.h20)
