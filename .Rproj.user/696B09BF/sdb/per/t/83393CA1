{
    "contents" : "#\n# Neural Net\n#\n\nsource('AMS.R')\n\nrequire(ROCR)\nrequire(plyr)\nrequire(h2o)\n\n# Read Data and prep\n# --------------------------------------------------------------\ntrain = read.csv(file.path(\"data\",\"training.csv\"))\n\ntrain$PRI_jet_num <- factor(train$PRI_jet_num)\ntrain[train==-999] <- NA\n\nhead(train)\n\n# Save response vectors to use later\ntrain_WL = train[, c('EventId', 'Weight', 'Label')]\n\nhead(train_WL)\n\n# set the Label, b=0, s=1\n#train$Label <- ifelse(train_WL$Label == 'b', 0, 1)\n\ntable(train_WL$Label)\ntable(train_WL$Label)/length(train_WL$Label)\n\n#\n# Neural Net for h2o\n#\n\nlocalH2O  <- h2o.init(Xmx = '6g' )\n\nh2o.clusterInfo(localH2O)\n\n# upload to h2o\ntrain.h2o <- as.h2o(localH2O, train, key='train.hex')\n\nsummary(train.h2o)\nclass(train.h2o)\n\n# model\nindependent <- names(train.h2o)[!names(train.h2o) %in% c('EventId', 'Weight', 'Label')]\ndependent <- 'Label'\n\nmodel.h2o <- h2o.deeplearning(x=independent, y=dependent, data=train.h2o\n                              ,classification=TRUE\n                              ,activation = 'Rectifier'\n                              ,hidden = c(30,30)\n                              ,epochs = 1000.0\n                              ,train_samples_per_iteration = -1\n                              ,adaptive_rate = TRUE\n                              ,rho = 0.999\n                              ,epsilon = 1e-6\n                              ,input_dropout_ratio = 0.0\n                              ,score_interval = 5.0\n                              ,variable_importances = TRUE\n                              ,diagnostics = TRUE\n                              ,single_node_mode = TRUE\n                              )\n\nmodel.h2o\n\npredict.h2o <- h2o.predict(object = model.h2o, newdata = train.h2o)\n\npreds <- as.data.frame(predict.h2o)\n\nhead(preds)\n\ntable(train_WL$Label)/length(train_WL$Label)\ntable(preds$predict)/length(preds$predict)\n\nnrow(preds)\n\nmodel.h2o\nAMS(pred=preds$predict,real=train_WL$Label,weight=train$Weight)\n\n# Make predictions on test set and create submission file\ntest = read.csv(file.path(\"data\",\"test.csv\"))\n\ntest$PRI_jet_num <- factor(as.character(test$PRI_jet_num))\n\n# upload to h2o\ntest.h2o <- as.h2o(localH2O, test, key='test.hex')\n\nnnTestPrediction.h2o = h2o.predict(object=model.h2o, newdata=test.h2o)\n\nnnTestPrediction <- as.data.frame(nnTestPrediction.h2o)\nhead(nnTestPrediction)\n\nweightRank = rank(nnTestPrediction$s, ties.method= \"random\")\n\n# table\ntable(nnTestPrediction$predict)\ntable(nnTestPrediction$predict)/length(nnTestPrediction$predict)\n\nsubmission = data.frame(EventId = test$EventId, RankOrder = weightRank, Class = nnTestPrediction$predict)\nwrite.csv(submission, \"nnet_submission_3.csv\", row.names=FALSE)\n\n\n\n\n\n# cleanup\nh2o.shutdown(localH2O, prompt = FALSE)\n",
    "created" : 1415829923847.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "815045597",
    "id" : "83393CA1",
    "lastKnownWriteTime" : 1415829877,
    "path" : "~/R/Kaggle Projects/Titanic/deeplearning_model_4.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}